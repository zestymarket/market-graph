type User @entity {
  id: ID!
  USDCReceived: BigInt
  USDCSent: BigInt
}

type TokenData @entity {
  id: ID!
  creator: Bytes
  owner: Bytes
  approved: Bytes
  timeCreated: BigInt
  uri: String
  zestyTokenValue: BigInt
  sellerNFTSetting: SellerNFTSetting @derivedFrom(field: "tokenData")
  burned: Boolean
  cumulativeVolumeUSDC: BigInt
  sellerAuctionCompletedCount: BigInt
  sellerAuctionCompletedTotalDuration: BigInt
  sellerAuctionCompletedMeanUSDCPerCount: BigInt
  sellerAuctionCompletedMeanUSDCPerSecond: BigInt
}

type SellerNFTSetting @entity {
  id: ID!
  tokenData: TokenData
  seller: Bytes
  autoApprove: Boolean
  inProgressCount: BigInt
  sellerAuctions: [SellerAuction!] @derivedFrom(field: "sellerNFTSetting")
  withdrawn: Boolean
}

type SellerAuction @entity {
  id: ID!
  currency: String
  sellerNFTSetting: SellerNFTSetting
  seller: Bytes
  auctionTimeStart: BigInt
  auctionTimeEnd: BigInt
  contractTimeStart: BigInt
  contractTimeEnd: BigInt
  priceStart: BigInt
  pricePending: BigInt
  priceEnd: BigInt
  buyerCampaigns: [BuyerCampaign!]
  buyerCampaignsPending: [Boolean!]
  buyerCampaignsApproved: [Boolean!]
  contract: Contract @derivedFrom(field: "sellerAuction")
  cancelled: Boolean!
}

type BuyerCampaign @entity {
  id: ID!
  buyer: Bytes
  uri: String
  cumulativeVolumeUSDC: BigInt!
  sellerAuctions: [SellerAuction!] @derivedFrom(field: "buyerCampaigns")
  contracts: [Contract!] @derivedFrom(field: "buyerCampaign")
}

type Contract @entity {
  id: ID!
  sellerAuction: SellerAuction
  buyerCampaign: BuyerCampaign
  contractTimeStart: BigInt
  contractTimeEnd: BigInt
  contractValue: BigInt
  withdrawn: Boolean
}